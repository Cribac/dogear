---
interface Props {
  title: string
}

const { title } = Astro.props
---
<!doctype html>
<html
  lang="en"
  class="dark"
>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Astro description"
    />
    <meta
      name="viewport"
      content="width=device-width"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon.svg"
    />
    <meta
      name="generator"
      content={Astro.generator}
    />
    <title>{title}</title>
  </head>
  <body class="bg-ctp-base text-ctp-text">
    <slot />
  </body>
</html>

<script is:inline>
const theme = (() => {
  if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
    return localStorage.getItem("theme")
  }
  if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
    return 'dark'
  }
  return 'light'
})()

const themeToggle = document.getElementById('themeToggle')

if (theme === 'light') {
  document.documentElement.classList.remove('dark')
  themeToggle.ariaLabel = 'Toggle Dark Mode'
} else {
  document.documentElement.classList.add('dark')
  themeToggle.ariaLabel = 'Toggle Light Mode'
}
window.localStorage.setItem('theme', theme)

const handleToggleClick = () => {
    const element = document.documentElement
    element.classList.toggle('dark')

    const isDark = element.classList.contains('dark')
    localStorage.setItem('theme', isDark ? 'dark' : 'light')
    themeToggle.ariaLabel = isDark ? 'Toggle Light Mode' : 'Toggle Dark Mode'
  }

document.getElementById('themeToggle').addEventListener('click', handleToggleClick)
</script>
